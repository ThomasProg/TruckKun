//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Input/CraneGameInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @CraneGameInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @CraneGameInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""CraneGameInput"",
    ""maps"": [
        {
            ""name"": ""Crane Controls"",
            ""id"": ""ec8f1ade-55a9-46b8-931c-7b6758b09a54"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""c56715b7-91ec-406c-85ff-6db5f57d4fe7"",
                    ""expectedControlType"": ""Integer"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Deploy Claw"",
                    ""type"": ""Button"",
                    ""id"": ""e21e7fae-8ce7-4828-88d7-e65ca0181a9d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Retract Claw"",
                    ""type"": ""Button"",
                    ""id"": ""6c0cba43-4c52-4509-9153-782a24b72c22"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""a1da0bbd-7ee0-4a62-ada0-7143e1b06ea9"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""85e72165-8e2c-4bd5-81cd-5c114370737d"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KB&M"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""6a0c9160-be06-49e8-9858-471069b335eb"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KB&M"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""09fd6bb3-7447-41cc-81ab-48a323276e88"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KB&M"",
                    ""action"": ""Deploy Claw"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2f6536f6-0b8e-4333-b10e-71528fa0e221"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KB&M"",
                    ""action"": ""Retract Claw"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""KB&M"",
            ""bindingGroup"": ""KB&M"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Crane Controls
        m_CraneControls = asset.FindActionMap("Crane Controls", throwIfNotFound: true);
        m_CraneControls_Movement = m_CraneControls.FindAction("Movement", throwIfNotFound: true);
        m_CraneControls_DeployClaw = m_CraneControls.FindAction("Deploy Claw", throwIfNotFound: true);
        m_CraneControls_RetractClaw = m_CraneControls.FindAction("Retract Claw", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Crane Controls
    private readonly InputActionMap m_CraneControls;
    private List<ICraneControlsActions> m_CraneControlsActionsCallbackInterfaces = new List<ICraneControlsActions>();
    private readonly InputAction m_CraneControls_Movement;
    private readonly InputAction m_CraneControls_DeployClaw;
    private readonly InputAction m_CraneControls_RetractClaw;
    public struct CraneControlsActions
    {
        private @CraneGameInput m_Wrapper;
        public CraneControlsActions(@CraneGameInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_CraneControls_Movement;
        public InputAction @DeployClaw => m_Wrapper.m_CraneControls_DeployClaw;
        public InputAction @RetractClaw => m_Wrapper.m_CraneControls_RetractClaw;
        public InputActionMap Get() { return m_Wrapper.m_CraneControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CraneControlsActions set) { return set.Get(); }
        public void AddCallbacks(ICraneControlsActions instance)
        {
            if (instance == null || m_Wrapper.m_CraneControlsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CraneControlsActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @DeployClaw.started += instance.OnDeployClaw;
            @DeployClaw.performed += instance.OnDeployClaw;
            @DeployClaw.canceled += instance.OnDeployClaw;
            @RetractClaw.started += instance.OnRetractClaw;
            @RetractClaw.performed += instance.OnRetractClaw;
            @RetractClaw.canceled += instance.OnRetractClaw;
        }

        private void UnregisterCallbacks(ICraneControlsActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @DeployClaw.started -= instance.OnDeployClaw;
            @DeployClaw.performed -= instance.OnDeployClaw;
            @DeployClaw.canceled -= instance.OnDeployClaw;
            @RetractClaw.started -= instance.OnRetractClaw;
            @RetractClaw.performed -= instance.OnRetractClaw;
            @RetractClaw.canceled -= instance.OnRetractClaw;
        }

        public void RemoveCallbacks(ICraneControlsActions instance)
        {
            if (m_Wrapper.m_CraneControlsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICraneControlsActions instance)
        {
            foreach (var item in m_Wrapper.m_CraneControlsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CraneControlsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CraneControlsActions @CraneControls => new CraneControlsActions(this);
    private int m_KBMSchemeIndex = -1;
    public InputControlScheme KBMScheme
    {
        get
        {
            if (m_KBMSchemeIndex == -1) m_KBMSchemeIndex = asset.FindControlSchemeIndex("KB&M");
            return asset.controlSchemes[m_KBMSchemeIndex];
        }
    }
    public interface ICraneControlsActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnDeployClaw(InputAction.CallbackContext context);
        void OnRetractClaw(InputAction.CallbackContext context);
    }
}
